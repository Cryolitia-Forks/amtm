#!/bin/sh
#bof

# amtm is free to use under the GNU General Public License version 3 (GPL-3.0)
# https://opensource.org/licenses/GPL-3.0

# Proudly coded by thelonelycoder
# Copyright (c) 2016-2066 thelonelycoder - All Rights Reserved
# https://www.snbforums.com/members/thelonelycoder.25480/
# https://diversion.ch/amtm.html

version=3.7
release="May 18 2023"
title="Asuswrt-Merlin Terminal Menu"
scriptPath=/jffs/scripts/amtm
add=/jffs/addons/amtm
dc_version=3.1
led_version=2.2
sh_version=1.0

ascii_logo(){
	echo "              _"
	echo "   ____ ____ | |_  ____"
	echo "  / _  |    \|  _)|    \ "
	echo " ( ( | | | | | |__| | | |"
	echo "  \_||_|_|_|_|\___)_|_|_|"
	echo
	echo " $1"
	[ "$1" = "  Goodbye" ] && [ -f "${add}/shellhistory" ] && "${add}"/shellhistory &
}

about_amtm(){
	p_e_l
	echo " amtm, the $title
 Version $version, released on $release

 amtm is a front end that manages popular scripts
 for wireless routers running Asuswrt-Merlin firmware.

 For updates and discussion visit:
 https://www.snbforums.com/forums/asuswrt-merlin-addons.60/

 Proudly coded by thelonelycoder:
 Copyright (c) 2016-2066 thelonelycoder - All Rights Reserved
 https://www.snbforums.com/members/thelonelycoder.25480
 https://diversion.ch/amtm.html

 Contributors: Adamm, ColinTaylor, Martineau, Stuart MacDonald,
 RavenSystem
 https://www.snbforums.com/members/adamm.19554
 https://www.snbforums.com/members/colintaylor.27699
 https://www.snbforums.com/members/martineau.13215
 https://www.snbforums.com/members/stuart-macdonald.68945

 amtm License:
 amtm is free to use under the GNU General
 Public License, version 3 (GPL-3.0).
 https://opensource.org/licenses/GPL-3.0

 Follow amtm on Reddit:
 https://www.reddit.com/r/diversion"
	p_r_l
	p_e_t "return to menu"
	show_amtm menu
}

show_amtm(){
	s_d_u
	c_t
	[ "$su" = 1 ] && [ "$theme" = solarized ] && COR=30
	if [ -z "$su" -a -s "${add}"/availUpd.txt ]; then
		. "${add}"/availUpd.txt
	else
		[ -z "$updcheck" -a -z "$tpu" ] && rm -f "${add}"/availUpd.txt
	fi
	[ -d /opt/bin ] && [ ! -L /opt/bin/amtm ] && ln -s "${scriptPath}" /opt/bin
	dlok=
	if [ -z "$updcheck" ]; then
		echo
		clear
		printf "${R_BG}%-27s%s\\n" " amtm $version" "by thelonelycoder ${NC}"
		[ -z "$(nvram get odmpid)" ] && model="$(nvram get productid)" || model="$(nvram get odmpid)"
		echo " $model ($(uname -m)) FW-$(nvram get buildno) @ $(nvram get lan_ipaddr)"
		OM='Operation Mode:'
		case "$(nvram get sw_mode)" in
			1) echo " $OM Wireless router";;
			2) echo " $OM Repeater";;
			3) echo " $OM Access Point (AP)";;
			4) echo " $OM Media Bridge";;
			5) echo " $OM AiMesh Node";;
			*) echo " $OM $(nvram get sw_mode), as-yet-unknown";;
		esac
		printf "${R_BG}%-44s ${NC}\\n\\n" "    The $title"
	fi

	modules='/opt/bin/diversion diversion 1 Diversion¦-¦the¦Router¦Adblocker
	/jffs/scripts/firewall skynet 2 Skynet¦-¦the¦Router¦Firewall
	/jffs/addons/flexqos/flexqos.sh FlexQoS 3 FlexQoS¦-¦Flexible¦QoS¦Enhancement
	/jffs/scripts/FreshJR_QOS FreshJR_QOS 3d FreshJR¦QOS¦-¦Adaptive¦QOS¦(deprecated)
	spacer
	/jffs/scripts/YazFi YazFi 4 YazFi¦-¦enhanced¦guest¦WiFi
	/jffs/scripts/scribe scribe 5 scribe¦-¦syslog-ng¦and¦logrotate
	/opt/bin/x3mMenu x3mRouting 6 x3mRouting¦-¦Selective¦Routing
	spacer
	/jffs/addons/unbound/unbound_manager.sh unbound_manager 7 unbound¦Manager¦-¦unbound¦utility
	/jffs/scripts/nsrum nsrum 8 nsrum¦-¦NVRAM¦Save/Restore¦Utility¦(deprecated)
	spacer
	/jffs/scripts/connmon connmon j1 connmon¦-¦Internet¦uptime¦monitor
	/jffs/scripts/ntpmerlin ntpmerlin j2 ntpMerlin¦-¦NTP¦Daemon
	/jffs/scripts/scmerlin scmerlin j3 scMerlin¦-¦Quick¦access¦control
	/jffs/scripts/wicens.sh wicens wi WICENS¦-¦WAN¦IP¦Change¦Email¦Notification¦Script
	spacer
	/jffs/scripts/spdmerlin spdmerlin j4 spdMerlin¦-¦Automatic¦speedtest
	/jffs/scripts/uiDivStats uiDivStats j5 uiDivStats¦-¦Diversion¦WebUI¦stats
	/jffs/scripts/uiScribe uiScribe j6 uiScribe¦-¦WebUI¦for¦scribe¦logs
	spacer
	/jffs/scripts/YazDHCP YazDHCP j7 YazDHCP¦-¦Expansion¦of¦DHCP¦assignments
	/jffs/scripts/dn-vnstat Vnstat vn vnStat¦-¦Data¦use¦monitoring
	/jffs/scripts/vpnmon-r2.sh vpnmon vp VPNMON-R2¦-¦Monitor¦health¦of¦VPN
	/jffs/scripts/killmon.sh killmon km KILLMON¦-¦VPN¦kill¦switch¦monitor¦&¦configurator
	/jffs/scripts/rtrmon.sh rtrmon rt RTRMON¦-¦Monitor¦your¦Routers¦Health
	spacer
	/jffs/dnscrypt/installer dnscrypt di dnscrypt¦installer
	/jffs/addons/wireguard/wg_manager.sh wireguard_manager wg WireGuard¦Session¦Manager
	/opt/etc/AdGuardHome/installer AdGuardHome ag Asuswrt-Merlin-AdGuardHome-Installer
	/jffs/scripts/wan-failover.sh WAN_Failover wf Dual¦WAN¦Failover¦-¦replaces¦ASUS¦WAN¦Failover
	spacer
	/opt/bin/opkg entware ep Entware¦-¦Software¦repository
	tpucheck
	pixelserv-tls
	/jffs/addons/amtm/games/games.conf games g Router¦Games¦-¦so¦much¦fun!
	spacer
	/jffs/addons/amtm/mail/email.conf email em email¦settings
	/jffs/addons/amtm/disk-check disk_check dc Disk¦check¦script
	fdisk
	/jffs/addons/amtm/ledcontrol led_control lc LED¦control¦-¦Scheduled¦LED¦control
	spacer
	rscheduler
	/jffs/addons/amtm/.ash_history shell_history sh shell¦history¦-¦Keep¦history¦of¦shell¦commands'

	IFS='
	'
	set -f
	for i in $modules; do
		if [ "$i" = spacer ]; then
			[ -z "$updcheck" -a "$atii" ] || [ "$ss" ] && echo
			atii=
		elif [ "$i" = tpucheck ]; then
			if [ "$tpu" ]; then
				[ -f /tmp/amtm-tpu-check ] && [ ! -s /tmp/amtm-tpu-check ] && rm /tmp/amtm-tpu-check
				if [ -f /tmp/amtm-tpu-check ] && [ "$updcheck" ]; then
					sed -i 's:<br>::g' /tmp/amtm-tpu-check
					if [ "$(wc -l < /tmp/amtm-tpu-check)" -eq 1 ]; then
						echo "No script updates available at this time in amtm." >/tmp/amtm-tpu-check
						rm -f "${add}"/availUpd.txt
					fi
					cat /tmp/amtm-tpu-check
					rm /tmp/amtm-tpu-check
				fi
				exit 0
			fi
			[ "$dlok" ] && tps=1 || tps=
			[ -z "$su" -a -s "${add}"/availUpd.txt ] && . "${add}"/availUpd.txt
		elif [ "$i" = pixelserv-tls ]; then
			if [ -f /opt/bin/pixelserv-tls ]; then
				if [ ! -f "${add}"/pixelserv-tls.mod ] && [ "$ss" ] && [ -z "$su" ]; then
					printf "${E_BG} ps${NC} %-9s%s\\n" "use" "pixelserv-tls CA for WebUI"
				else
					g_m pixelserv-tls.mod include
				fi
				case_ps(){
					g_m pixelserv-tls.mod include
					[ -f "${add}"/pixelserv-tls.mod ] && use_ps_ca
				}
			else
				r_m pixelserv-tls.mod
				case_ps(){
					show_amtm " No pixelserv-tls beta versions are available\\n at thist time from its author kvic"
				}
			fi
		elif [ "$i" = fdisk ]; then
			if [ -f "${add}"/amtm-format-disk.log ]; then
				atii=1
				[ "$su" ] || printf "${GN_BG} fd${NC} %-9s%s\\n" "run" "Format disk         ${GN_BG}fdl${NC} show log"
			else
				[ "$ss" ] && [ -z "$su" ] && printf "${E_BG} fd${NC} %-9s%s\\n" "run" "Format disk"
				r_m format_disk.mod
			fi
			case_fd(){
				g_m format_disk.mod include
				[ -f "${add}"/format_disk.mod ] && format_disk || show_amtm menu
			}
		elif [ "$i" = rscheduler ]; then
			if [ -f /jffs/scripts/init-start ] && grep -qE "amtm_RebootScheduler" /jffs/scripts/init-start; then
				g_m reboot_scheduler.mod include
				[ -f "${add}"/reboot_scheduler.mod ] && reboot_scheduler_installed || show_amtm menu
			else
				[ "$ss" ] && [ -z "$su" ] && printf "${E_BG} rs${NC} %-9s%s\\n" "enable" "Reboot scheduler"
				r_m reboot_scheduler.mod
				case_rs(){
					g_m reboot_scheduler.mod include
					[ -f "${add}"/reboot_scheduler.mod ] && install_reboot_scheduler || show_amtm menu
				}
			fi
		else
			scriptloc=$(echo $i | awk '{print $1}')
			f2=$(echo $i | awk '{print $2}')
			if [ -f "$scriptloc" ]; then
				g_m ${f2}.mod include
				[ -f "${add}/${f2}.mod" ] && ${f2}_installed
			else
				f3="$(echo $i | awk '{print $3}')"
				[ "$(echo $f3 | wc -m)" -gt 2 ] && ssp= || ssp=' '
				[ "$ss" ] && printf "${E_BG} ${f3}$ssp${NC} %-9s%s\\n" "install" "$(echo $i | awk '{print $4}' | sed 's/¦/ /g')"
				if [ -s "${add}"/availUpd.txt -a -f "${add}/${f2}.mod" ]; then
					sn=$(grep 'scriptname=' "${add}/${f2}.mod" | sed "s/.*scriptname=//;s/ /_/g;s/\//_/g;s/'//g")
					[ "$sn" ] && sed -i "/^$sn.*/d" "${add}"/availUpd.txt
				fi
				r_m ${f2}.mod
				case $f3 in
					1)		case_1(){ g_m diversion.mod include;[ "$dlok" = 1 ] && install_diversion || show_amtm menu;};;
					2)		case_2(){ g_m skynet.mod include;[ "$dlok" = 1 ] && install_skynet || show_amtm menu;};;
					3)		case_3(){ g_m FlexQoS.mod include;[ "$dlok" = 1 ] && install_FlexQoS || show_amtm menu;};;
					3d)		case_3d(){ g_m FreshJR_QOS.mod include;[ "$dlok" = 1 ] && install_FreshJR_QOS || show_amtm menu;};;
					4)		case_4(){ g_m YazFi.mod include;[ "$dlok" = 1 ] && install_YazFi || show_amtm menu;};;
					5)		case_5(){ c_e scribe;g_m scribe.mod include;[ "$dlok" = 1 ] && install_scribe || show_amtm menu;};;
					6)		case_6(){ c_e x3mRouting;g_m x3mRouting.mod include;[ "$dlok" = 1 ] && install_x3mRouting || show_amtm menu;};;
					7)		case_7(){ c_e 'unbound Manager';g_m unbound_manager.mod include;[ "$dlok" = 1 ] && install_unbound_manager || show_amtm menu;};;
					8)		case_8(){ g_m nsrum.mod include;[ "$dlok" = 1 ] && install_nsrum || show_amtm menu;};;
					j1)		case_j1(){ c_e connmon;g_m connmon.mod include;[ "$dlok" = 1 ] && install_connmon || show_amtm menu;};;
					j2)		case_j2(){ c_e ntpmerlin;g_m ntpmerlin.mod include;[ "$dlok" = 1 ] && install_ntpmerlin || show_amtm menu;};;
					j3)		case_j3(){ g_m scmerlin.mod include;[ "$dlok" = 1 ] && install_scmerlin || show_amtm menu;};;
					wi)		case_wi(){ g_m wicens.mod include;[ "$dlok" = 1 ] && install_wicens || show_amtm menu;};;
					j4)		case_j4(){ c_e spdMerlin;g_m spdmerlin.mod include;[ "$dlok" = 1 ] && install_spdmerlin || show_amtm menu;};;
					j5)		case_j5(){ g_m uiDivStats.mod include;[ "$dlok" = 1 ] && install_uiDivStats || show_amtm menu;};;
					j6)		case_j6(){ g_m uiScribe.mod include;[ "$dlok" = 1 ] && install_uiScribe || show_amtm menu;};;
					j7)		case_j7(){ g_m YazDHCP.mod include;[ "$dlok" = 1 ] && install_YazDHCP || show_amtm menu;};;
					vn)		case_vn(){ c_e Vnstat;g_m Vnstat.mod include;[ "$dlok" = 1 ] && install_Vnstat || show_amtm menu;};;
					vp)		case_vp(){ c_e VPNMON-R2;g_m vpnmon.mod include;[ "$dlok" = 1 ] && install_vpnmon || show_amtm menu;};;
					km)		case_km(){ c_e KILLMON;g_m killmon.mod include;[ "$dlok" = 1 ] && install_killmon || show_amtm menu;};;
					rt)		case_rt(){ c_e RTRMON;g_m rtrmon.mod include;[ "$dlok" = 1 ] && install_rtrmon || show_amtm menu;};;
					di)		case_di(){ g_m dnscrypt.mod include;[ "$dlok" = 1 ] && install_dnscrypt || show_amtm menu;};;
					wg)		case_wg(){ c_e 'WireGuard Session Manager';g_m wireguard_manager.mod include;[ "$dlok" = 1 ] && install_wireguard_manager || show_amtm menu;};;
					ag)		case_ag(){ c_e 'Asuswrt-Merlin-AdGuardHome-Installer';g_m AdGuardHome.mod include;[ "$dlok" = 1 ] && install_AdGuardHome || show_amtm menu;};;
					wf)		case_wf(){ g_m WAN_Failover.mod include;[ "$dlok" = 1 ] && install_WAN_Failover || show_amtm menu;};;
					ep)		case_ep(){ g_m entware_setup.mod include;[ "$dlok" = 1 ] && install_Entware || show_amtm menu;};;
					g)		case_g(){ c_e 'router Games';g_m games.mod include;[ "$dlok" = 1 ] && install_Games || show_amtm menu;};;
					dc)		case_dc(){ g_m disk_check.mod include;[ "$dlok" = 1 ] && install_disk_check || show_amtm menu;};;
					lc)		case_lc(){ g_m led_control.mod include;[ "$dlok" = 1 ] && install_led_control || show_amtm menu;};;
					em)		case_em(){ g_m email.mod include;[ "$dlok" = 1 ] && install_email || show_amtm menu;};;
					sh)		case_sh(){ g_m shell_history.mod include;[ "$dlok" = 1 ] && install_shell_history || show_amtm menu;};;
				esac
			fi
		fi
	done
	set +f

	unset IFS swl swsize swpsize swtxt mpsw awmUpd
	gms(){ g_m swap.mod include;[ "$dlok" = 0 ] && show_amtm menu;}
	[ -f /jffs/scripts/post-mount ] && swl="$(grep -E "^swapon " /jffs/scripts/post-mount | awk '{print $2}')"
	if [ "$(wc -l < /proc/swaps)" -eq 2 ]; then
		if [ -f "$swl" ] && [ "$swl" = "$(sed -n '2p' /proc/swaps | awk '{print $1}')" ]; then
			if grep -qE "^swapon $swl" /jffs/scripts/post-mount; then
				swsize=$(du -h "$swl" | awk '{print $1}')
			else
				gms;check_swap
			fi
		else
			gms;check_swap
		fi
	elif [ -f /jffs/configs/fstab ] && grep -qF "swap" /jffs/configs/fstab; then
		gms;check_swap
	elif [ "$swl" ] && [ ! -f "$swl" ]; then
		gms;check_swap
	fi
	if [ "$swtxt" ] && ! grep -q 'do-not-check-swap' /jffs/scripts/post-mount; then
		a_m "$swtxt"
	fi
	if [ -f "$swl" ]; then
		atii=1
		[ "$su" ] || printf "${GN_BG} sw${NC} %-9s%s ${GN}%s${NC} $swsize\\n" "manage" "Swap file" "$(echo "${swl#/tmp}" | sed 's|/myswap.swp||')"
		case_swp(){
			gms;manage_swap delete
		}
	elif [ "$swl" ] && [ "$swpsize" ]; then
		atii=1
		[ "$su" ] || printf "${GN_BG}   ${NC} %-9s%s ${GN_BG}%s${NC}\\n" "Swap" "Partition" "${GN_BG}$swl${NC} ${swpsize}M"
		case_swp(){
			show_amtm " amtm does not manage swap partitions"
		}
	elif [ "$mpsw" ]; then
		atii=1
		[ "$su" ] || printf "${GN_BG} sw${NC} %-9s%s ${GN_BG}%s${NC}\\n" "delete" "Swap files"
		case_swp(){
			gms;manage_swap multidelete
		}
	else
		[ "$ss" ] && [ -z "$su" ] && printf "${E_BG} sw${NC} %-9s%s\\n" "create" "Swap file"
		case_swp(){
			gms;manage_swap create
		}
	fi

	[ "$atii" ] || [ "$ss" ] && [ -z "$su" ] && echo
	atii=

	if [ "$ss" ]; then
		[ "$su" ] || printf "${GN_BG} i ${NC} %-9s%s\\n" "hide" "inactive scripts or tools"
	else
		[ "$su" ] || printf "${E_BG} i ${NC} %-9s%s\\n" "show" "all available scripts or tools"
	fi

	if [ "$su" = 1 ]; then
		update_firmware
		update_amtm
		unset corr1 corr2
		if [ "$amtmUpd" = 0 ]; then
			vversion="${GN_BG} uu ${NC} force update"
			corr1=-2
		else
			[ "$theme" = solarized ] && corr2=+1
			vversion="        v$version"
		fi
		printf "${GN_BG} m ${NC} %-9s%-$((21$corr2))s%$((COR$corr1))s\\n" "menu" "amtm  $vversion" "$thisrem"
	else
		[ "$ss" ] || printf "${GN_BG} u ${NC} %-9s%s\\n" "check" "for script updates"
		echo
		if [ "$amtmUpate" ]; then
			printf "${GN_BG} uu${NC} %-9s%-$((21$corr2))s%$((COR$corr1))s\\n" "update" "amtm          v$version" "${E_BG}$amtmUpate${NC}"
		else
			echo "    amtm options"
		fi
		echo "${GN_BG} e ${NC} exit     ${GN_BG} t ${NC} theme  ${GN_BG} r ${NC} remove  ${GN_BG} a ${NC} about"
	fi

	[ "$ss" ] && ssi=1 || ssi=
	unset ss atii upd
	if [ "$su" = 1 ]; then
		su=
		if [ "$suUpd" = 1 -o "$awmUpd" = 1 ] || [ "$amtmUpd" -gt 0 ]; then
			tpText="${R}Third party script update(s) available!${NC} Use\\n the scripts own update function to update."
			[ "$awmUpd" = 1 ] && awmText="${R}Asuswrt-Merlin firmware update available!${NC}\\n See https://asuswrt-merlin.net/download"
			if [ "$amtmUpd" -gt 0 ]; then
				p_e_l
				if [ "$suUpd" = 1 ]; then
					printf " $tpText\\n"
					p_e_l
				fi
				if [ "$awmUpd" = 1 ]; then
					printf " $awmText\\n"
					p_e_l
				fi
				amtmUpdText="updated from v$version to v$amtmRemotever"
				[ "$amtmUpd" = 1 ] && printf " ${R}amtm $amtmRemotever is now available!${NC}\\n See https://diversion.ch for what's new.\\n"
				if [ "$amtmUpd" = 2 ]; then
					printf " ${R}A minor amtm update is available!${NC}\\n"
					amtmUpdText="minor version update applied."
				fi
				echo
				while true; do
					printf " Update amtm now? [1=Yes e=Exit] ";read -r continue
					case "$continue" in
						1)		break;;
						[Ee])	show_amtm menu;break;;
						*)		printf "\\n input is not an option\\n\\n";;
					esac
				done
				a_m "$amtmUpdText"
				g_i_m
				[ -s "${add}"/availUpd.txt ] && . "${add}"/availUpd.txt
				if [ "$amtmUpate" ] && [ "$amtmMD5" != "$(md5sum "$0" | awk '{print $1}')" ]; then
					sed -i '/^amtm.*/d' "${add}"/availUpd.txt
					unset amtmUpate amtmMD5
				fi
				[ "$tpw" = 1 ] && [ "$tps" = 1 ] && a_m "\\n For ${R}third-party script updates${NC}, use their\\n own update function."
				exec "${scriptPath}" " amtm $am"
			else
				[ "$suUpd" = 1 ] && a_m " $tpText"
				[ "$suUpd" = 1 ] && [ "$awmUpd" = 1 ] && a_m " "
				[ "$awmUpd" = 1 ] && a_m " $awmText"
			fi
		else
			if [ "$updErr" = 1 ]; then
				a_m "\\n Update(s) aborted, could not retrieve version"
			else
				a_m " Everything's up to date ($(date +"%b %d %Y %R"))"
			fi
		fi
	fi
	[ "$sfp" = 1 ] && s_p
	unset sfp dlLoc

	if [ "$1" = menu ] && [ -z "$am" ]; then
		p_e_l
	else
		p_e_l
		if [ "$am" ]; then
			[ "$1" = menu ] && printf "$(echo "$am" | sed 's/^\\n//')\\n" || printf "$1\\n$am\\n"
			am=
		else
			printf "$1\\n"
		fi
		p_e_l
	fi

	while true; do
		printf "${R_BG} Enter option ${NC} ";read -r selection
		s_d_u
		case "$selection" in
			1)					case_1;break;;
			2)					case_2;break;;
			3)					case_3;break;;
			3d)					case_3d;break;;
			4)					case_4;break;;
			5)					case_5;break;;
			6)					case_6;break;;
			7)					case_7;break;;
			8)					case_8;break;;
			[Jj]1)				case_j1;break;;
			[Jj]2)				case_j2;break;;
			[Jj]3)				case_j3;break;;
			[Ww][Ii])			case_wi;break;;
			[Jj]4)				case_j4;break;;
			[Jj]5)				case_j5;break;;
			[Jj]6)				case_j6;break;;
			[Jj]7)				case_j7;break;;
			[Vv][Nn])			case_vn;break;;
			[Vv][Pp])			case_vp;break;;
			[Kk][Mm])			case_km;break;;
			[Rr][Tt])			case_rt;break;;
			awm)				show_amtm " Asuswrt-Merlin link for new firmware:\\n https://asuswrt-merlin.net/download";break;;
			[Ii])				c_ntp;if [ "$ssi" ]; then ss=;more=less;else ss=1;more=more;fi;show_amtm menu;break;;
			[Dd][Ii])			case_di;break;;
			[Ww][Gg])			case_wg;break;;
			[Aa][Gg])			case_ag;break;;
			[Ww][Ff])			case_wf;break;;
			[Ee][Pp])			case_ep;break;;
			[Pp][Ss])			case_ps;break;;
			[Uu])				c_ntp;[ -f "${add}"/availUpd.txt ] && rm "${add}"/availUpd.txt;tpw=1;su=1;suUpd=0;updErr=;show_amtm menu;break;;
			[Dd][Cc])			case_dc;break;;
			dcl|DCL)			s_l_f amtm-disk-check.log;break;;
			[Ff][Dd])			case_fd;break;;
			fdl|FDL)			s_l_f amtm-format-disk.log;break;;
			[Ll][Cc])			c_ntp;case_lc;break;;
			[Rr][Ss])			c_ntp;case_rs;break;;
			[Ss][Ww])			case_swp;break;;
			[Ee][Mm])			case_em;break;;
			[Gg])				if [ -f "${add}"/games/games.conf ]; then [ "$more" = "more" ] && more=less || more=more;show_amtm menu; else case_g;fi;break;;
			[Gg]r)				case_gr;break;;
			[Gg]1|[Gg]1r)		[ "$sgs" != "hide" ] && o_g_s || case_g1;break;;
			[Gg]2|[Gg]2r)		[ "$sgs" != "hide" ] && o_g_s || case_g2;break;;
			[Gg]3|[Gg]3r)		[ "$sgs" != "hide" ] && o_g_s || case_g3;break;;
			[Gg]4|[Gg]4r)		[ "$sgs" != "hide" ] && o_g_s || case_g4;break;;
			[Gg]5|[Gg]5r)		[ "$sgs" != "hide" ] && o_g_s || case_g5;break;;
			[Gg]6|[Gg]6r)		[ "$sgs" != "hide" ] && o_g_s || case_g6;break;;
			[Gg]7|[Gg]7r)		[ "$sgs" != "hide" ] && o_g_s || case_g7;break;;
			[Gg]8|[Gg]8r)		[ "$sgs" != "hide" ] && o_g_s || case_g8;break;;
			[Gg]9|[Gg]9r)		[ "$sgs" != "hide" ] && o_g_s || case_g9;break;;
			[Gg]10|[Gg]10r)		[ "$sgs" != "hide" ] && o_g_s || case_g10;break;;
			[Ss][Hh])			case_sh;break;;
			[Tt]|[Cc][Tt])		theme_amtm;break;;
			[Mm])				show_amtm menu;break;;
			[Uu][Uu])			c_ntp;tpw=1;update_amtm;break;;
			[Rr])				remove_amtm;break;;
			[Aa])				about_amtm;break;;
			[Ee])				clear
								ascii_logo '  Goodbye'
								echo
								exit 0;break;;
			reboot)				p_e_l   # hidden, reboot router
								echo " OK then, rebooting this router, are you sure?"
								c_d
								clear
								ascii_logo '  Goodbye!'
								echo
								printf " amtm reboots this router now\\n\\n"
								sleep 1
								service reboot >/dev/null 2>&1 &
								exit 0
								break;;
			*)					printf "\\n               input is not an option\\n\\n";;
		esac
	done
}

a_m(){ [ -z "$am" ] && am=$1 || am="$am\\n$1";}
c_e(){ [ ! -f /opt/bin/opkg ] && show_amtm " $1 requires the Entware repository\\n installed. Enter ${GN_BG}ep${NC} to install Entware now.";}
c_nl(){ [ -n "$(tail -c2 "$1")" ] && echo >> "$1";}
c_ntp(){ [ "$(nvram get ntp_ready)" = 0 ] && show_amtm " NTP not ready, check that router time is synced";}
c_j_s(){ if [ ! -f "$1" ]; then echo "#!/bin/sh" >"$1"; echo >>"$1"; elif [ -f "$1" ] && ! head -1 "$1" | grep -qE "^#!/bin/sh"; then c_nl "$1"; echo >>"$1"; sed -i '1s~^~#!/bin/sh\n~' "$1";fi; d_t_u "$1"; c_nl "$1"; [ ! -x "$1" ] && chmod 0755 "$1";}
c_d(){ p_e_l;while true;do printf " Continue? [1=Yes e=Exit] ";read -r continue;case "$continue" in 1)echo;break;;[Ee])am=;show_amtm menu;break;;*)printf "\\n input is not an option\\n\\n";;esac done;}
c_url(){ [ -f /opt/bin/curl ] && curlv=/opt/bin/curl || curlv=/usr/sbin/curl;$curlv -fsNL --connect-timeout 10 --retry 3 --max-time 12 "$@";}
d_t_u(){ dos2unix < $1 | cmp -s - $1;[ "$?" = 1 ] && dos2unix $1;}
o_g_s(){ show_amtm " ${R}Open games section with${NC} ${GN_BG} g ${NC} ${R}to play a game${NC}";}
p_e_t(){ printf "\\n Press Enter to $1 ";read -r;echo;}
p_r_l(){ echo "${R}_____________________________________________${NC}";}
p_e_l(){ p_r_l;echo;}
r_w_e(){ [ "$(sed '/^[[:space:]]*$/d; /#!\/bin\/sh/d' "$1" | wc -c)" = 0 ] && rm "$1";}
r_m(){ [ -f "${add}/$1" ] && rm -f "${add}/$1";}
s_d_u(){ case "$release" in *XX*)amtmURL=http://diversion.test/amtm;devEnv=1;;*)amtmURL=https://diversion.ch/amtm;;esac;}
t_f(){ sed -i '/^[[:space:]]*$/d' "$1"; [ -n "$(tail -c1 "$1")" ] && echo >> "$1";}
theme_standard(){ R='[31m';R_BG='[41m';E_BG='[41m';GN='[92m';GN_BG='[42m';B='[94m';GY='[90m';NC='[0m';COR=20;}
theme_green(){ R='[33m';R_BG='[42m';E_BG='[41m';GN='[92m';GN_BG='[42m';B='[94m';GY='[90m';NC='[0m';COR=20;}
theme_blue(){ R='[34m';R_BG='[44m';E_BG='[101m';GN='[94m';GN_BG='[104m';B='[38;5;112m';GY='[90m';NC='[0m';COR=21;}
theme_blue_on_white(){ R='[34m';R_BG='[104m';E_BG='[101m';GN='[94m';GN_BG='[104m';B='[38;5;112m';GY='[90m';NC='[0m';COR=21;}
theme_solarized(){ R='[38;2;220;50;47m';R_BG='[48;2;220;50;47m';E_BG='[48;2;220;50;47m';GN='[38;2;133;153;0m';GN_BG='[48;2;7;54;66m';B='[38;2;38;139;210m';GY='[38;2;88;110;117m';NC='[0m';COR=32;}
theme_high_contrast(){ R='[91m';R_BG='[41m';E_BG='[41m';GN='[32m';GN_BG='[42m';B='[38;5;51m';GY='[90m';NC='[0m';COR=20;}
theme_reduced(){ R='[31m';R_BG='[100m';E_BG='[100m';GN='[37m';GN_BG='[100m';B='[37m';GY='[90m';NC='[0m';COR=21;}
theme_reduced_w(){ R='[31m';R_BG='[97;40m';E_BG='[97;40m';GN='[32m';GN_BG='[97;40m';B='[30m';GY='[90m';NC='[0m';COR=23;}
theme_reduced_cw(){ R='[31m';R_BG='[97;40m';E_BG='[97;41m';GN='[32m';GN_BG='[30;42m';B='[30m';GY='[90m';NC='[0m';COR=23;}
theme_reduced_b(){ R='[38;5;209m';R_BG='[100m';E_BG='[100m';GN='[38;5;157m';GN_BG='[100m';B='[37m';GY='[90m';NC='[0m';COR=21;}
theme_reduced_cb(){ R='[31m';R_BG='[100m';E_BG='[30;41m';GN='[38;5;157m';GN_BG='[30;42m';B='[37m';GY='[90m';NC='[0m';COR=23;}
theme_basic(){ R='[31m';R_BG=;E_BG=;GN=;GN_BG=;B=;GY='[90m';NC='[0m';COR=15;}

s_l_f(){
	if [ -f "${add}/$1" ]; then
		echo
		echo " ---------------------------------------------------"
		printf " $1 has this content:\\n\\n"
		echo " START FILE, --- lines are not part of file"
		echo " ---------------------------------------------------"
		sed -e 's/^/ /' "${add}/$1"
		echo " ---------------------------------------------------"
		echo " END FILE"
		echo
		p_e_l
		if [ "$1" = .ash_history ]; then
			p_e_t "return to menu"
		else
			while true; do
				printf " Delete log file now? [1=Yes e=Exit] ";read -r continue
				case "$continue" in
					1)		rm "${add}/$1"
							show_amtm " $1 deleted"
							break;;
					[Ee])	show_amtm menu;break;;
					*)		printf "\\n input is not an option\\n\\n";;
				esac
			done
		fi
	else
		show_amtm " No $1 found"
	fi
}

g_m(){
	[ "$3" ] || set -- "$1" "$2" "${add}"
	[ "$1" = amtm ] && ftg='File  ' || ftg=Module
	if [ "$2" = new ]; then
		[ -z "$dlLoc" ] && a_m "\\n Getting from $(echo $amtmURL | awk -F[/:] '{print $4}')"
		dlLoc=1
		c_url "$amtmURL/$1" -o "$3/${1}.new"
		if [ -s "$3/${1}.new" ]; then
			if grep -wq '^#bof' "$3/${1}.new" && grep -wq '^#eof' "$3/${1}.new"; then
				mv -f "$3/${1}.new" "$3/$1"
				a_m " - $ftg ${GN}$1${NC} ${rdl}downloaded"
				sfp=1;dlok=1
			else
				rm -f "$3/${1}.new"
				a_m " ! $ftg ${R}$1${NC} is not an amtm file"
				dlok=0
			fi
		elif [ -f "$3/$1" ]; then
			rm -f "$3/${1}.new"
			a_m " ! $ftg ${R}$1${NC} ${rdl}download failed, using existing file"
		else
			rm -f "$3/${1}.new"
			a_m " ! $ftg ${R}$1${NC} ${rdl}download failed"
			dlok=0
		fi
	fi
	if [ "$2" = include ]; then
		if [ -f "$3/$1" ]; then
			. "$3/$1"
			dlok=1
		else
			g_m "$1" new "$3"
			[ -f "$3/$1" ] && . "$3/$1" || dlok=0
		fi
	fi
}

g_i_m(){
	rdl=re
	g_m amtm new /jffs/scripts
	if [ "$(ls -A "${add}")" ]; then
		for i in "${add}"/*.mod; do
			[ -f "$i" ] && g_m "${i##*/}" new
		done
	fi
	s_p
	rdl=
}

s_p(){
	for i in "${add}"/*; do
		if [ -f "$i" ]; then
			[ ! -w "$i" ] && chmod 0666 "$i"
			d_t_u "$i"
		fi
	done
	if [ -f "${scriptPath}" ]; then
		[ ! -x "${scriptPath}" ] && chmod 0755 "${scriptPath}"
		d_t_u "${scriptPath}"
	fi
	[ -L /opt/bin/amtm ] && [ ! -x /opt/bin/amtm ] && chmod 0755 /opt/bin/amtm
}

script_check(){
	atii=1
	[ "$localVother" ] && localver=$localVother || localver="$(grep "$scriptgrep" "$scriptloc" | grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})')"
	upd="${E_BG}${NC}$localver"
	if [ "$su" = 1 ]; then
		if c_url "$remoteurl" | grep -qF -m1 "$grepcheck"; then
			[ "$remoteVother" ] && remotever=$remoteVother || remotever="$(c_url "$remoteurl" | grep -m1 "$scriptgrep" | grep -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})')"
			bareLocalver=$(echo $localver | sed 's/[^0-9]*//g')
			bareRemotever=$(echo $remotever | sed 's/[^0-9]*//g')
			localmd5="$(md5sum "$scriptloc" | awk '{print $1}')"
			upd="${GN_BG}$localver${NC}"
			if [ "$bareLocalver" -gt "$bareRemotever" ]; then
				upd="${E_BG}<- $remotever${NC}"
				tpUpd="<- $remotever"
				[ "$tpu" ] && echo "- $scriptname $localver <- $remotever <br>" >>/tmp/amtm-tpu-check
				suUpd=1
			elif [ "$bareLocalver" -lt "$bareRemotever" ]; then
				upd="${E_BG}-> $remotever${NC}"
				tpUpd="-> $remotever"
				[ "$tpu" ] && echo "- $scriptname $localver -> $remotever <br>" >>/tmp/amtm-tpu-check
				suUpd=1
			else
				if grep -q '^# amtm NoMD5check' "$scriptloc"; then
					localver="No MD5"
				else
					[ "$remoteurlmd5" ] && remoteurl=$remoteurlmd5
					remotemd5="$(c_url "$remoteurl" | md5sum | awk '{print $1}')"
					if [ "$localmd5" != "$remotemd5" ]; then
						upd="${E_BG}-> min upd${NC}"
						tpUpd="-> min upd"
						[ "$tpu" ] && echo "- $scriptname $localver, minor update available <br>" >>/tmp/amtm-tpu-check
						suUpd=1
					else
						localver=
					fi
				fi
			fi
			if [ -z "$tpu" -o "$updcheck" ] && [ "$tpUpd" ]; then
				echo "$(echo $scriptname | sed -e 's/ /_/g;s/\//_/g')Upate=\"$tpUpd\"">>"${add}"/availUpd.txt
				echo "$(echo $scriptname | sed -e 's/ /_/g;s/\//_/g')MD5=\"$localmd5\"">>"${add}"/availUpd.txt
			fi
		else
			upd=" ${E_BG}upd err${NC}"
			updErr=1
			a_m " ! $scriptname: ${R}$(echo $remoteurl | awk -F[/:] '{print $4}')${NC} unreachable"
		fi
	else
		lvtpu=$localver
		localver=
	fi
	unset tpUpd localVother remoteVother bareLocalver bareRemotever localmd5 remotemd5 remoteurlmd5
}

theme_amtm(){
	p_e_l
	if [ -z "$1" ]; then
		printf " All colors in use are shown.\\n Your current theme is: ${R_BG} $theme ${NC}\\n\\n"
	else
		printf " Select a theme that works best in your\\n SSH client. All colors in use are shown.\\n\\n"
	fi
	themes='standard green blue blue_on_white solarized high_contrast reduced reduced_w reduced_cw reduced_b reduced_cb'
	i=1
	for theme in $themes; do
		ncorr=' '
		case $theme in
			blue)			corr1=-1;corr2=-1;;
			blue_on_white)	corr2=-1;;
			solarized)		corr3=-2;;
			reduced)		corr2=-1;;
			reduced_w)		corr2=-3;;
			reduced_cw)		corr2=-3;;
			reduced_b)		corr2=+5;ncorr=;;
			reduced_cb)		corr1=-2;corr2=+3;ncorr=;;
		esac
		theme_$theme
		printf "%-$((COR+2$corr1))s %-$((COR+4$corr3))s %-$((COR-6))s\\n" "${R_BG}$ncorr$i. $theme" "${NC}${GN_BG} $theme" "${NC}${B} ${theme:0:10}${NC}"
		printf "   %-$((COR-1))s %-$((COR+4$corr2))s %-s\\n" "${E_BG} $theme" "${NC}${GN} $theme" "${NC}${GY} ${theme:0:10}${NC}"
		p_e_l
		i=$((i+1))
		unset corr3 corr2 corr1 ncorr
	done
	theme_basic
	printf "${R_BG}12. basic         ${NC}${GN_BG} basic${NC}\\n"
	p_r_l
	ton=12;noad=
	if [ -f "$divconf" ]; then
		printf "\\n13. Let Diversion set theme ($(grep "THEME=" "$divconf" | sed -e 's/THEME=//'))\\n"
		p_r_l
		ton=13;noad=13
	fi
	printf "\\n The basic and reduced themes use no or fewer\\n colors, service states may not be visible.\\n"
	theme_standard
	while true; do
		if [ -z "$1" ]; then
			printf "\\n Set new amtm theme: [1-$ton e=Exit] ";read -r continue
		else
			printf "\\n Select amtm theme: [1-$ton] ";read -r continue
		fi
		case "$continue" in
			1) theme=standard;break;;
			2) theme=green;break;;
			3) theme=blue;break;;
			4) theme=blue_on_white;break;;
			5) theme=solarized;break;;
			6) theme=high_contrast;break;;
			7) theme=reduced;break;;
			8) theme=reduced_w;break;;
			9) theme=reduced_cw;break;;
			10) theme=reduced_b;break;;
			11) theme=reduced_cb;break;;
			12) theme=basic;break;;
		$noad)	[ -f "${add}"/.amtm_theme ] && rm "${add}"/.amtm_theme
				theme=
				show_amtm " amtm now uses the Diversion theme"
				break;;
		 [Ee]) 	show_amtm menu;;
			*)	printf "\\n input is not an option\\n";;
		esac
	done
	echo "theme=$theme" >"${add}"/.amtm_theme
	[ "$1" ] || show_amtm " changed theme to $theme"
}

c_t(){
	divconf=/opt/share/diversion/.conf/diversion.conf
	if [ -f "${add}"/.amtm_theme ]; then
		. "${add}"/.amtm_theme
	else
		[ -s "$divconf" ] && theme="$(grep "THEME=" "$divconf" | sed -e 's/THEME=//')"
	fi
	[ "$theme" ] && theme_$theme || theme_amtm new
}

update_amtm(){
	if ! c_url "$amtmURL/amtm" | grep -q "^version="; then
		if [ "$su" = 1 ]; then
			updErr=1
			thisrem=" ${E_BG}upd err${NC}"
			amtmUpd=0
			a_m " ! amtm: ${R}$(echo $amtmURL | awk -F[/:] '{print $4}')${NC} unreachable"
		else
			show_amtm " ! amtm: ${R}$(echo $amtmURL | awk -F[/:] '{print $4}')${NC} unreachable"
		fi
	else
		amtmRemotever="$(c_url "$amtmURL/amtm" | grep "^version=" | sed -e 's/version=//')"
		localmd5="$(md5sum "$0" | awk '{print $1}')"
		remotemd5="$(c_url "$amtmURL/amtm" | md5sum | awk '{print $1}')"

		if [ "$su" = 1 ]; then
			if [ "$version" != "$amtmRemotever" ]; then
				thisrem="${E_BG}-> v$amtmRemotever${NC}"
				thisUpd="-> v$amtmRemotever"
				[ "$updcheck" ] && echo "- amtm $version $thisUpd" >>/tmp/amtm-tpu-check
				amtmUpd=1
			elif [ "$localmd5" != "$remotemd5" ]; then
				thisrem="${E_BG}-> min upd${NC}"
				thisUpd="-> min upd"
				[ "$updcheck" ] && echo "- amtm $version, minor update available" >>/tmp/amtm-tpu-check
				amtmUpd=2
			else
				thisrem="${GN_BG}v$version${NC}"
				amtmUpd=0
			fi
			if [ "$amtmUpd" -gt 0 ]; then
				echo "amtmUpate=\"$thisUpd\"">>"${add}"/availUpd.txt
				echo "amtmMD5=\"$localmd5\"">>"${add}"/availUpd.txt
			fi
		else
			if [ "$version" != "$amtmRemotever" ]; then
				a_m "updated from v$version to v$amtmRemotever"
			elif [ "$localmd5" != "$remotemd5" ]; then
				a_m "minor version update applied"
			else
				a_m "force updated to v$amtmRemotever"
			fi
			g_i_m
			[ -s "${add}"/availUpd.txt ] && . "${add}"/availUpd.txt
			if [ "$amtmUpate" ] && [ "$amtmMD5" != "$(md5sum "$0" | awk '{print $1}')" ]; then
				sed -i '/^amtm.*/d' "${add}"/availUpd.txt
				unset amtmUpate amtmMD5
			fi
			[ "$tpw" = 1 ] && [ "$tps" = 1 ] && a_m "\\n For ${R}third-party script updates${NC}, use their\\n own update function."
			exec "${scriptPath}" " amtm $am"
		fi
	fi
}

update_firmware(){
	[ "$updcheck" ] && rm -f "${add}"/availUpd.txt
	version_check(){ echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';}
	awmBuildno=$(nvram get buildno)
	if [ "$(/bin/uname -o | grep -iw Merlin$)" -a "$(version_check $awmBuildno)" -ge "$(version_check 382)" ]; then
		awmWSI=$(nvram get webs_state_info)
		awmInstalled="$awmBuildno.$(nvram get extendno)"
		if [ "$awmWSI" ]; then
			awmStable=$(echo $awmWSI | sed 's/3004_//' | sed 's/_/./g')
			awmBaseVer=$(echo $awmStable | cut -d'.' -f1-2)
			if [ "$(version_check $awmBaseVer)" -gt "$(version_check $awmBuildno)" ]; then
				availRel="release avail.";stcol=${E_BG};awmUpd=1
			elif [ "$awmBaseVer" = "$awmBuildno" ]; then
				if echo "$(nvram get extendno)" | grep -q 'alpha\|beta'; then
					availRel="release avail.";stcol=${E_BG};awmUpd=1
				elif [ "$(version_check $awmStable)" -gt "$(version_check $awmInstalled)" ]; then
					availRel="release avail.";stcol=${E_BG};awmUpd=1
				else
					availRel=firmware;stcol=${GN_BG}
				fi
			else
				availRel=firmware;stcol=${GN_BG}
				[ "$(echo "$awmInstalled" | grep 'alpha\|beta')" ] && availRel="no release yet"
				awmStable=$awmInstalled
			fi
			[ "$awmUpd" = 1 ] && [ "$updcheck" ] && echo "- Asuswrt-Merlin $availRel $awmStable" >>/tmp/amtm-tpu-check
		else
			availRel=firmware;stcol=${GN_BG}
			[ "$(echo "$awmInstalled" | grep 'alpha\|beta')" ] && availRel="no release yet"
			awmStable=$awmInstalled
		fi
		[ -z "$updcheck" ] && printf "${GN_BG}awm${NC} %-15s%-15s%${COR}s\\n\\n" "Asuswrt-Merlin" "$availRel" " ${stcol}$awmStable${NC}"
	fi
}

install_amtm(){
	amtm_install(){
		[ -d "${add}" ] && fmd= || fmd=1
		mkdir -p "${add}"

		if [ ! -d "${add}" ]; then
			printf "\\n amtm failed to create the directory\\n ${add}\\n Please investigate. Aborting amtm now.\\n\\n"
			exit 1
		fi
		if [ "$(nvram get ntp_ready)" = 0 ]; then
			printf "\\n NTP not ready, check that the router time\\n is synced.\\n Aborting amtm now.\\n\\n"
			exit 1
		fi

		mv /jffs/amtm-* "${add}" 2> /dev/null;mv /jffs/.amtm_* "${add}" 2> /dev/null

		c_t

		[ "$(readlink -f "$0")" != "${scriptPath}" ] && cp "$0" "${scriptPath}"
		[ -f /opt/bin/amtm ] && rm -f /opt/bin/amtm
		if [ -d /opt/bin ] && [ ! -L /opt/bin/amtm ]; then
			ln -s "${scriptPath}" /opt/bin
		fi

		if [ ! -f /jffs/configs/profile.add ]; then
			echo "alias amtm='${scriptPath}' # added by amtm" >/jffs/configs/profile.add
		elif ! grep -q "^alias amtm=" /jffs/configs/profile.add; then
			sed -i '/alias amtm=/d' /jffs/configs/profile.add >/dev/null
			d_t_u /jffs/configs/profile.add
			c_nl /jffs/configs/profile.add
			echo "alias amtm='${scriptPath}' # added by amtm" >>/jffs/configs/profile.add
		fi

		if [ "$1" = migrated ]; then
			a_m " amtm $1 to v$version"
		else
			a_m " amtm $version installed, start command is"
			a_m " ${GN_BG} amtm ${NC} or ${GN_BG} ${scriptPath} ${NC}\\n"
			a_m " Initializing amtm for first run"
		fi

		[ "$fmd" ] && a_m " - Created ${GN}${add}${NC} directory"

		if [ "$(nvram get jffs2_scripts)" != 1 ]; then
			a_m " - JFFS custom scripts and configs enabled"
			nvram set jffs2_scripts=1
			nvram commit
		fi

		s_p
		if [ "$0" != "${scriptPath}" ]; then
			rm -f "$0"
		fi
		exec "${scriptPath}" "$am"
	}

	if [ -f /usr/sbin/amtm ] && [ -z "$devEnv" ]; then
		if [ -f "/jffs/configs/profile.add" ]; then
			sed -i '/alias amtm=/d' /jffs/configs/profile.add >/dev/null
			r_w_e /jffs/configs/profile.add
		fi
		rm -f "$0"
		exec /usr/sbin/amtm
	elif [ -f "${scriptPath}" ]; then
		amtm_install migrated
	else
		clear
		theme_standard
		ascii_logo ""
		printf "%-27s%s\\n" " This is amtm $version" "by thelonelycoder"
		p_e_l
		echo " Welcome to amtm"
		echo " The $title"
		p_e_l
		while true; do
			printf " Install amtm now? [1=Yes e=Exit] ";read -r continue
			case "$continue" in
				1)		if [ -z "$(which dos2unix)" ]; then
							echo
							echo " This routers firmware is missing"
							echo " dos2unix. amtm cannot be installed."
							rm -f "$0"
							echo
							exit 0

						elif [ ! -f /usr/sbin/curl ]; then
							echo
							echo " Sorry, wrong platform."
							echo " amtm cannot be installed."
							rm -f "$0"
							echo
							exit 0
						elif [ ! -d /jffs ]; then
							echo
							echo " /jffs partition is not present on this"
							echo " router. amtm cannot be installed."
							echo " Please investigate."
							rm -f "$0"
							echo
							exit 0
						else
							amtm_install new
						fi
						break;;
				[Ee])	clear;ascii_logo "  Goodbye"
						rm -f "$0";echo;exit 0;break;;
				*)		printf "\\n input is not an option\\n\\n";;
			esac
		done
	fi
}

remove_amtm(){
	p_e_l
	echo " Do you want to remove amtm now?"
	echo
	echo " Note that removing amtm will not remove or"
	echo " uninstall any third-party SNBForum scripts."
	echo
	echo " However, when found it will remove the Disk"
	echo " check script and log, the Format disk log,"
	echo " the Reboot scheduler, the LED control and"
	echo " email settings you may have set."
	c_d
	if [ -f /jffs/scripts/pre-mount ] && grep -q "disk-check # Added by amtm" /jffs/scripts/pre-mount; then
		sed -i '\~disk-check # Added by amtm~d' /jffs/scripts/pre-mount
		r_w_e /jffs/scripts/pre-mount
	fi
	if [ -f /jffs/scripts/init-start ] && grep -q "amtm_RebootScheduler" /jffs/scripts/init-start; then
		sed -i '\~amtm_RebootScheduler~d' /jffs/scripts/init-start
		r_w_e /jffs/scripts/init-start
		cru d amtm_RebootScheduler
	fi
	if [ -f "${add}"/ledcontrol ]; then
		"${add}"/ledcontrol -on -p >/dev/null 2>&1
		rm "${add}"/ledcontrol*
	fi
	if [ -f /jffs/scripts/services-start ] && grep -q "${add}/ledcontrol.*" /jffs/scripts/services-start; then
		sed -i "\~${add}/ledcontrol.*~d" /jffs/scripts/services-start
		r_w_e /jffs/scripts/services-start
		cru d amtm_LEDcontrol_on
		cru d amtm_LEDcontrol_off
	fi
	if [ -f /jffs/scripts/services-start ] && grep -q "^${add}/shellhistory" /jffs/scripts/services-start; then
		sed -i "\~${add}/shellhistory.*~d" /jffs/scripts/services-start
		r_w_e /jffs/scripts/services-start
		rm -f /home/root/.ash_history /tmp/amtm_sort_s_h
	fi

	if [ -f "/jffs/configs/profile.add" ]; then
		sed -i '/alias amtm=/d' /jffs/configs/profile.add >/dev/null
		r_w_e /jffs/configs/profile.add
	fi
	rm -rf "${add}"
	rm -f /opt/bin/amtm "${scriptPath}" "$0"

	clear
	ascii_logo "  amtm completely removed"
	echo
	echo "   Goodbye!"
	echo
	exit 0
}

s_d_u
if [ ! -d "${add}" ] || [ ! -f "${scriptPath}" ] || [ -f /usr/sbin/amtm -a -z "$devEnv" ]; then
	install_amtm
elif ! cmp -s "$0" "$scriptPath"; then
	cp -f "$0" "$scriptPath"
	s_p
	if [ "$0" != "$scriptPath" ]; then
		rm -f "$0"
	fi
	c_t
	a_m "$version auto-update applied"
	g_i_m
	[ -s "${add}"/availUpd.txt ] && . "${add}"/availUpd.txt
	if [ "$amtmUpate" ] && [ "$amtmMD5" != "$(md5sum "$0" | awk '{print $1}')" ]; then
		sed -i '/^amtm.*/d' "${add}"/availUpd.txt
		unset amtmUpate amtmMD5
	fi
	[ "$tpw" = 1 ] && [ "$tps" = 1 ] && a_m "\\n For ${R}third-party script updates${NC}, use their\\n own update function."
	exec "${scriptPath}" " amtm $am"
elif [ -z "$1" ]; then
	[ "$am" ] && show_amtm "$am" || show_amtm menu
elif [ "$1" = tpu ]; then
	su=1;suUpd=0;updErr=;tpu=1
	> /tmp/amtm-tpu-check
	show_amtm >/dev/null 2>&1
elif [ "$1" = updcheck ]; then
	su=1;suUpd=0;updErr=;tpu=1;updcheck=1
	echo "Available script updates:" >/tmp/amtm-tpu-check
	update_firmware
	update_amtm
	show_amtm
else
	show_amtm "$1"
fi
#eof
